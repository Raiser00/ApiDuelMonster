@page "/"
@using ApiDuelMonster.Data
@using System.Text.Json
@inject CardApi api
@inject IJSRuntime JSR


<PageTitle>Home</PageTitle>

<h1>API de carte Duel Monsters</h1>

@if(api.CurrentCarte != null)
{
	<p>ID : @api.CurrentCarte.Id</p>
	<p>Name : @api.CurrentCarte.Name</p>
	<p>Race : @api.CurrentCarte.Race</p>
	<p>Type : @api.CurrentCarte.Type</p>
	<p>Description : @api.CurrentCarte.Desc</p>
	<p><img src="@api.CurrentCarte.Image" alt="Carte" /></p>

}

<p>
	<button @onclick="GetCarte">Check</button>
	<button @onclick="AddFavs">Add Card</button>
</p>

<p>
	@AddingSuccess
</p>




@code
{
	private string AddingSuccess;

	private bool _isFirstRender = true;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && _isFirstRender)
		{
			if (api.Favorites.Count() == 0)
			{
				await LoadFavorites();
			}
			_isFirstRender = false; // Prevent future invocations on re-renders
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task AddFavs()
	{
		if(api.AddFavs())
		{
			AddingSuccess = "Card added to Favorites !";
			await SaveFavorites();
		}
		else
		{
			AddingSuccess = "Error with adding ! Card already in the Favorites";
		}
	}

	private async Task GetCarte()
	{
		await api.GetCarte();

	}

	private async Task SaveFavorites()
	{
		var json = JsonSerializer.Serialize(api.Favorites);
		await JSR.InvokeVoidAsync("localStorage.setItem", "FavsCards", json);
	}

	private async Task LoadFavorites()
	{
		var value = await JSR.InvokeAsync<string>("localStorage.getItem", "FavsCards");

		if(value != null)
		{
			List<Card> saving = JsonSerializer.Deserialize<List<Card>>(value);
			api.Favorites = saving;
		}

	}



	
}
